#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('forum-chat-app:server');
const http = require('http');
const {apiRequest} = require('../requests/apiRequest');
//const db = require('../settings/database');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const webSocket = require('ws');
//const io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */
//db();
// websocket
const wss = new webSocket.Server({port:8090});

wss.on('connection',(ws,request)=>{
  console.log('user connected');
   ws.on('message',async (message)=>{
     const m = JSON.parse(message.toString());
     if(m.type === "getUrl"){
       ws.url = m.url
     }else if(m.type === 'addMessageChat'){
       wss.clients.forEach(client => {
         console.log('message',m.data);
         if(client.url === ws.url && client.readyState === client.OPEN){
           client.send(JSON.stringify({"type":"addMessageChat","data":{username:m.data.username,message:m.data.message}}));
         }
       })
      /* const resu = await apiRequest.setChatMessage(m.data);
       if(resu.etat){
           wss.clients.forEach(client => {
             if(client.url === ws.url && client.readyState === client.OPEN){
               client.send(JSON.stringify({"type":"addMessageChat","data":{username:m.data.username,message:m.data.message}}));
             }
           })
       } */
     }/*else if(m.type === "addMessageForum"){
       const resu = await apiRequest.setForumMessage(m.data);
       if(resu.etat){
           wss.clients.forEach(client => {
             if(client.url === ws.url && client.readyState === client.OPEN){
               client.send(JSON.stringify({"type":"addMessageForum","data":{username:m.data.username,message:m.data.message}}));
             }
           })
       }
     } */
   });

});



// end websocket
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
